[
	{
		"name": "$resourceType",
		"ident": 0,
		"order": 1,
		"desc": "Returns the FHIR type name for this instance",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$metadata",
		"ident": 1,
		"order": 2,
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$setupMetadata",
		"ident": 2,
		"order": 3,
		"pvardefs": [
			{
				"name": "pElements",
				"order": 1,
				"type": "kFieldreference",
				"subtype": 0,
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$construct",
		"ident": 3,
		"order": 4,
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$copyFrom",
		"ident": 4,
		"order": 5,
		"pvardefs": [

		],
		"lvardefs": [
			{
				"name": "itemRef",
				"order": 2,
				"type": "kItemref",
				"subtype": "",
				"sublen": 0
			},
			{
				"name": "list",
				"order": 1,
				"type": "kList",
				"subtype": "",
				"sublen": 0
			}
		]
	},
	{
		"name": "$path",
		"ident": 5,
		"order": 6,
		"desc": "Returns: The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$path.$assign",
		"ident": 6,
		"order": 7,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$representation",
		"ident": 7,
		"order": 8,
		"desc": "Returns: Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addrepresentation",
		"ident": 8,
		"order": 9,
		"desc": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Codes that define how this element is represented in instances, when the deviation varies from the normal case."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$sliceName",
		"ident": 9,
		"order": 10,
		"desc": "Returns: The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$sliceName.$assign",
		"ident": 10,
		"order": 11,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of th"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$label",
		"ident": 11,
		"order": 12,
		"desc": "Returns: A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$label.$assign",
		"ident": 12,
		"order": 13,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$code",
		"ident": 13,
		"order": 14,
		"desc": "Returns: A code that has the same meaning as the element in a particular terminology.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcode",
		"ident": 14,
		"order": 15,
		"desc": "A code that has the same meaning as the element in a particular terminology.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oCoding",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oCoding",
				"sublen": 0,
				"desc": "A code that has the same meaning as the element in a particular terminology."
			}
		]
	},
	{
		"name": "$slicing",
		"ident": 15,
		"order": 16,
		"desc": "Returns: Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.$assign",
		"ident": 16,
		"order": 17,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1,
				"desc": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.discriminator",
		"ident": 17,
		"order": 18,
		"desc": "Returns: Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addslicing.discriminator",
		"ident": 18,
		"order": 19,
		"desc": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element "
			}
		]
	},
	{
		"name": "$slicing.discriminator.type",
		"ident": 19,
		"order": 20,
		"desc": "Returns: How the element value is interpreted when discrimination is evaluated.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.discriminator.type.$assign",
		"ident": 20,
		"order": 21,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "How the element value is interpreted when discrimination is evaluated."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.discriminator.path",
		"ident": 21,
		"order": 22,
		"desc": "Returns: A FHIRPath expression, using a restricted subset of FHIRPath, that is used to identify the element on which discrimination is based.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.discriminator.path.$assign",
		"ident": 22,
		"order": 23,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A FHIRPath expression, using a restricted subset of FHIRPath, that is used to identify the element on which discrimination is based."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.description",
		"ident": 23,
		"order": 24,
		"desc": "Returns: A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.description.$assign",
		"ident": 24,
		"order": 25,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.ordered",
		"ident": 25,
		"order": 26,
		"desc": "Returns: If the matching elements have to occur in the same order as defined in the profile.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.ordered.$assign",
		"ident": 26,
		"order": 27,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kBoolean",
				"subtype": 0,
				"sublen": 0,
				"param": 1,
				"desc": "If the matching elements have to occur in the same order as defined in the profile."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.rules",
		"ident": 27,
		"order": 28,
		"desc": "Returns: Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$slicing.rules.$assign",
		"ident": 28,
		"order": 29,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$short",
		"ident": 29,
		"order": 30,
		"desc": "Returns: A concise description of what this element means (e.g. for use in autogenerated summaries).",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$short.$assign",
		"ident": 30,
		"order": 31,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A concise description of what this element means (e.g. for use in autogenerated summaries)."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$definition",
		"ident": 31,
		"order": 32,
		"desc": "Returns: Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$definition.$assign",
		"ident": 32,
		"order": 33,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of t"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$comment",
		"ident": 33,
		"order": 34,
		"desc": "Returns: Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$comment.$assign",
		"ident": 34,
		"order": 35,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$requirements",
		"ident": 35,
		"order": 36,
		"desc": "Returns: This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$requirements.$assign",
		"ident": 36,
		"order": 37,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$alias",
		"ident": 37,
		"order": 38,
		"desc": "Returns: Identifies additional names by which this element might also be known.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addalias",
		"ident": 38,
		"order": 39,
		"desc": "Identifies additional names by which this element might also be known.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Identifies additional names by which this element might also be known."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$min",
		"ident": 39,
		"order": 40,
		"desc": "Returns: The minimum number of times this element SHALL appear in the instance.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$min.$assign",
		"ident": 40,
		"order": 41,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kInteger",
				"subtype": "k32bitint",
				"sublen": 0,
				"param": 1,
				"desc": "The minimum number of times this element SHALL appear in the instance."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$max",
		"ident": 41,
		"order": 42,
		"desc": "Returns: The maximum number of times this element is permitted to appear in the instance.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$max.$assign",
		"ident": 42,
		"order": 43,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The maximum number of times this element is permitted to appear in the instance."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$base",
		"ident": 43,
		"order": 44,
		"desc": "Returns: Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$base.$assign",
		"ident": 44,
		"order": 45,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1,
				"desc": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original de"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$base.path",
		"ident": 45,
		"order": 46,
		"desc": "Returns: The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$base.path.$assign",
		"ident": 46,
		"order": 47,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) with"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$base.min",
		"ident": 47,
		"order": 48,
		"desc": "Returns: Minimum cardinality of the base element identified by the path.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$base.min.$assign",
		"ident": 48,
		"order": 49,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kInteger",
				"subtype": "k32bitint",
				"sublen": 0,
				"param": 1,
				"desc": "Minimum cardinality of the base element identified by the path."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$base.max",
		"ident": 49,
		"order": 50,
		"desc": "Returns: Maximum cardinality of the base element identified by the path.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$base.max.$assign",
		"ident": 50,
		"order": 51,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Maximum cardinality of the base element identified by the path."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$contentReference",
		"ident": 51,
		"order": 52,
		"desc": "Returns: Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$contentReference.$assign",
		"ident": 52,
		"order": 53,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$::type",
		"ident": 53,
		"order": 54,
		"desc": "Returns: The data type or resource that the value of this element is permitted to be.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addtype",
		"ident": 54,
		"order": 55,
		"desc": "The data type or resource that the value of this element is permitted to be.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "The data type or resource that the value of this element is permitted to be."
			}
		]
	},
	{
		"name": "$type.code",
		"ident": 55,
		"order": 56,
		"desc": "Returns: URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.code.$assign",
		"ident": 56,
		"order": 57,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are o"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.profile",
		"ident": 57,
		"order": 58,
		"desc": "Returns: Identifies a profile structure or implementation Guide that SHALL hold for the datatype this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.profile.$assign",
		"ident": 58,
		"order": 59,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Identifies a profile structure or implementation Guide that SHALL hold for the datatype this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canon"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.targetProfile",
		"ident": 59,
		"order": 60,
		"desc": "Returns: Identifies a profile structure or implementation Guide that SHALL hold for the target of the reference this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.targetProfile.$assign",
		"ident": 60,
		"order": 61,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Identifies a profile structure or implementation Guide that SHALL hold for the target of the reference this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation G"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.aggregation",
		"ident": 61,
		"order": 62,
		"desc": "Returns: If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addtype.aggregation",
		"ident": 62,
		"order": 63,
		"desc": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.versioning",
		"ident": 63,
		"order": 64,
		"desc": "Returns: Whether this reference needs to be version specific or version independent, or whether either can be used.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$type.versioning.$assign",
		"ident": 64,
		"order": 65,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Whether this reference needs to be version specific or version independent, or whether either can be used."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$meaningWhenMissing",
		"ident": 65,
		"order": 66,
		"desc": "Returns: The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$meaningWhenMissing.$assign",
		"ident": 66,
		"order": 67,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$orderMeaning",
		"ident": 67,
		"order": 68,
		"desc": "Returns: If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$orderMeaning.$assign",
		"ident": 68,
		"order": 69,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$example",
		"ident": 69,
		"order": 70,
		"desc": "Returns: A sample value for this element demonstrating the type of information that would typically be found in the element.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addexample",
		"ident": 70,
		"order": 71,
		"desc": "A sample value for this element demonstrating the type of information that would typically be found in the element.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "A sample value for this element demonstrating the type of information that would typically be found in the element."
			}
		]
	},
	{
		"name": "$example.label",
		"ident": 71,
		"order": 72,
		"desc": "Returns: Describes the purpose of this example amoung the set of examples.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$example.label.$assign",
		"ident": 72,
		"order": 73,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Describes the purpose of this example amoung the set of examples."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$maxLength",
		"ident": 73,
		"order": 74,
		"desc": "Returns: Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$maxLength.$assign",
		"ident": 74,
		"order": 75,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kInteger",
				"subtype": "k32bitint",
				"sublen": 0,
				"param": 1,
				"desc": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$condition",
		"ident": 75,
		"order": 76,
		"desc": "Returns: A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcondition",
		"ident": 76,
		"order": 77,
		"desc": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A reference to an invariant that may make additional statements about the cardinality or value in the instance."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint",
		"ident": 77,
		"order": 78,
		"desc": "Returns: Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addconstraint",
		"ident": 78,
		"order": 79,
		"desc": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance."
			}
		]
	},
	{
		"name": "$constraint.key",
		"ident": 79,
		"order": 80,
		"desc": "Returns: Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.key.$assign",
		"ident": 80,
		"order": 81,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.requirements",
		"ident": 81,
		"order": 82,
		"desc": "Returns: Description of why this constraint is necessary or appropriate.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.requirements.$assign",
		"ident": 82,
		"order": 83,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Description of why this constraint is necessary or appropriate."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.severity",
		"ident": 83,
		"order": 84,
		"desc": "Returns: Identifies the impact constraint violation has on the conformance of the instance.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.severity.$assign",
		"ident": 84,
		"order": 85,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Identifies the impact constraint violation has on the conformance of the instance."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.human",
		"ident": 85,
		"order": 86,
		"desc": "Returns: Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.human.$assign",
		"ident": 86,
		"order": 87,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.expression",
		"ident": 87,
		"order": 88,
		"desc": "Returns: A [FHIRPath](http://hl7.org/fluentpath) expression of constraint that can be executed to see if this constraint is met.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.expression.$assign",
		"ident": 88,
		"order": 89,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A [FHIRPath](http://hl7.org/fluentpath) expression of constraint that can be executed to see if this constraint is met."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.xpath",
		"ident": 89,
		"order": 90,
		"desc": "Returns: An XPath expression of constraint that can be executed to see if this constraint is met.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.xpath.$assign",
		"ident": 90,
		"order": 91,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "An XPath expression of constraint that can be executed to see if this constraint is met."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.source",
		"ident": 91,
		"order": 92,
		"desc": "Returns: A reference to the original source of the constraint, for traceability purposes.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$constraint.source.$assign",
		"ident": 92,
		"order": 93,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A reference to the original source of the constraint, for traceability purposes."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$mustSupport",
		"ident": 93,
		"order": 94,
		"desc": "Returns: If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$mustSupport.$assign",
		"ident": 94,
		"order": 95,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kBoolean",
				"subtype": 0,
				"sublen": 0,
				"param": 1,
				"desc": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$isModifier",
		"ident": 95,
		"order": 96,
		"desc": "Returns: If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$isModifier.$assign",
		"ident": 96,
		"order": 97,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kBoolean",
				"subtype": 0,
				"sublen": 0,
				"param": 1,
				"desc": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$isSummary",
		"ident": 97,
		"order": 98,
		"desc": "Returns: Whether the element should be included if a client requests a search with the parameter _summary=true.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$isSummary.$assign",
		"ident": 98,
		"order": 99,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kBoolean",
				"subtype": 0,
				"sublen": 0,
				"param": 1,
				"desc": "Whether the element should be included if a client requests a search with the parameter _summary=true."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$binding",
		"ident": 99,
		"order": 100,
		"desc": "Returns: Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$binding.$assign",
		"ident": 100,
		"order": 101,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1,
				"desc": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri)."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$binding.strength",
		"ident": 101,
		"order": 102,
		"desc": "Returns: Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$binding.strength.$assign",
		"ident": 102,
		"order": 103,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$binding.description",
		"ident": 103,
		"order": 104,
		"desc": "Returns: Describes the intended use of this particular set of codes.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$binding.description.$assign",
		"ident": 104,
		"order": 105,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Describes the intended use of this particular set of codes."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping",
		"ident": 105,
		"order": 106,
		"desc": "Returns: Identifies a concept from an external specification that roughly corresponds to this element.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addmapping",
		"ident": 106,
		"order": 107,
		"desc": "Identifies a concept from an external specification that roughly corresponds to this element.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Identifies a concept from an external specification that roughly corresponds to this element."
			}
		]
	},
	{
		"name": "$mapping.identity",
		"ident": 107,
		"order": 108,
		"desc": "Returns: An internal reference to the definition of a mapping.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping.identity.$assign",
		"ident": 108,
		"order": 109,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "An internal reference to the definition of a mapping."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping.language",
		"ident": 109,
		"order": 110,
		"desc": "Returns: Identifies the computable language in which mapping.map is expressed.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping.language.$assign",
		"ident": 110,
		"order": 111,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Identifies the computable language in which mapping.map is expressed."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping.map",
		"ident": 111,
		"order": 112,
		"desc": "Returns: Expresses what part of the target specification corresponds to this element.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping.map.$assign",
		"ident": 112,
		"order": 113,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Expresses what part of the target specification corresponds to this element."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping.comment",
		"ident": 113,
		"order": 114,
		"desc": "Returns: Comments that provide information about the mapping or its use.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$mapping.comment.$assign",
		"ident": 114,
		"order": 115,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Comments that provide information about the mapping or its use."
			}
		],
		"lvardefs": [

		]
	}
]
