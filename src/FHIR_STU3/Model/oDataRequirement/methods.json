[
	{
		"name": "$resourceType",
		"ident": 0,
		"order": 1,
		"desc": "Returns the FHIR type name for this instance",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$metadata",
		"ident": 1,
		"order": 2,
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$setupMetadata",
		"ident": 2,
		"order": 3,
		"pvardefs": [
			{
				"name": "pElements",
				"order": 1,
				"type": "kFieldreference",
				"subtype": 0,
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$construct",
		"ident": 3,
		"order": 4,
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$copyFrom",
		"ident": 4,
		"order": 5,
		"pvardefs": [

		],
		"lvardefs": [
			{
				"name": "itemRef",
				"order": 2,
				"type": "kItemref",
				"subtype": "",
				"sublen": 0
			},
			{
				"name": "list",
				"order": 1,
				"type": "kList",
				"subtype": "",
				"sublen": 0
			}
		]
	},
	{
		"name": "$::type",
		"ident": 5,
		"order": 6,
		"desc": "Returns: The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$::type.$assign",
		"ident": 6,
		"order": 7,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$profile",
		"ident": 7,
		"order": 8,
		"desc": "Returns: The profile of the required data, specified as the uri of the profile definition.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addprofile",
		"ident": 8,
		"order": 9,
		"desc": "The profile of the required data, specified as the uri of the profile definition.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The profile of the required data, specified as the uri of the profile definition."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$mustSupport",
		"ident": 9,
		"order": 10,
		"desc": "Returns: Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. Note that the value for this element can be a path to allow references to nested elements. In that case, all the elements along the path must be supported.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addmustSupport",
		"ident": 10,
		"order": 11,
		"desc": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. Note that the value for this element can be a path to allow references to nested elements. In that case, all the elements along the path must be supported.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming sys"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter",
		"ident": 11,
		"order": 12,
		"desc": "Returns: Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcodeFilter",
		"ident": 12,
		"order": 13,
		"desc": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data."
			}
		]
	},
	{
		"name": "$codeFilter.path",
		"ident": 13,
		"order": 14,
		"desc": "Returns: The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.path.$assign",
		"ident": 14,
		"order": 15,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-eleme"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.valueCode",
		"ident": 15,
		"order": 16,
		"desc": "Returns: The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcodeFilter.valueCode",
		"ident": 16,
		"order": 17,
		"desc": "The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value "
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.valueCoding",
		"ident": 17,
		"order": 18,
		"desc": "Returns: The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcodeFilter.valueCoding",
		"ident": 18,
		"order": 19,
		"desc": "The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oCoding",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oCoding",
				"sublen": 0,
				"desc": "The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a val"
			}
		]
	},
	{
		"name": "$codeFilter.valueCodeableConcept",
		"ident": 19,
		"order": 20,
		"desc": "Returns: The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcodeFilter.valueCodeableConcept",
		"ident": 20,
		"order": 21,
		"desc": "The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oCodeableConcept",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oCodeableConcept",
				"sublen": 0,
				"desc": "The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path "
			}
		]
	},
	{
		"name": "$dateFilter",
		"ident": 21,
		"order": 22,
		"desc": "Returns: Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$adddateFilter",
		"ident": 22,
		"order": 23,
		"desc": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements."
			}
		]
	},
	{
		"name": "$dateFilter.path",
		"ident": 23,
		"order": 24,
		"desc": "Returns: The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$dateFilter.path.$assign",
		"ident": 24,
		"order": 25,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-eleme"
			}
		],
		"lvardefs": [

		]
	}
]
