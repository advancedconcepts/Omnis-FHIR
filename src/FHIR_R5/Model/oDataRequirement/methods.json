[
	{
		"name": "$resourceType",
		"ident": 0,
		"order": 1,
		"desc": "Returns the FHIR type name for this instance",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$metadata",
		"ident": 1,
		"order": 2,
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$setupMetadata",
		"ident": 2,
		"order": 3,
		"pvardefs": [
			{
				"name": "pElements",
				"order": 1,
				"type": "kFieldreference",
				"subtype": 0,
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$construct",
		"ident": 3,
		"order": 4,
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$copyFrom",
		"ident": 4,
		"order": 5,
		"pvardefs": [

		],
		"lvardefs": [
			{
				"name": "itemRef",
				"order": 2,
				"type": "kItemref",
				"subtype": "",
				"sublen": 0
			},
			{
				"name": "list",
				"order": 1,
				"type": "kList",
				"subtype": "",
				"sublen": 0
			}
		]
	},
	{
		"name": "$::type",
		"ident": 5,
		"order": 6,
		"desc": "Returns: The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$::type.$assign",
		"ident": 6,
		"order": 7,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$profile",
		"ident": 7,
		"order": 8,
		"desc": "Returns: The profile of the required data, specified as the uri of the profile definition.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addprofile",
		"ident": 8,
		"order": 9,
		"desc": "The profile of the required data, specified as the uri of the profile definition.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The profile of the required data, specified as the uri of the profile definition."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$mustSupport",
		"ident": 9,
		"order": 10,
		"desc": "Returns: Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addmustSupport",
		"ident": 10,
		"order": 11,
		"desc": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming sys"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter",
		"ident": 11,
		"order": 12,
		"desc": "Returns: Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcodeFilter",
		"ident": 12,
		"order": 13,
		"desc": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed."
			}
		]
	},
	{
		"name": "$codeFilter.path",
		"ident": 13,
		"order": 14,
		"desc": "Returns: The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.path.$assign",
		"ident": 14,
		"order": 15,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers ("
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.searchParam",
		"ident": 15,
		"order": 16,
		"desc": "Returns: A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.searchParam.$assign",
		"ident": 16,
		"order": 17,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.valueSet",
		"ident": 17,
		"order": 18,
		"desc": "Returns: The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.valueSet.$assign",
		"ident": 18,
		"order": 19,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valuese"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$codeFilter.code",
		"ident": 19,
		"order": 20,
		"desc": "Returns: The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addcodeFilter.code",
		"ident": 20,
		"order": 21,
		"desc": "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oCoding",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oCoding",
				"sublen": 0,
				"desc": "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, t"
			}
		]
	},
	{
		"name": "$dateFilter",
		"ident": 21,
		"order": 22,
		"desc": "Returns: Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$adddateFilter",
		"ident": 22,
		"order": 23,
		"desc": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed."
			}
		]
	},
	{
		"name": "$dateFilter.path",
		"ident": 23,
		"order": 24,
		"desc": "Returns: The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$dateFilter.path.$assign",
		"ident": 24,
		"order": 25,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers ("
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$dateFilter.searchParam",
		"ident": 25,
		"order": 26,
		"desc": "Returns: A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$dateFilter.searchParam.$assign",
		"ident": 26,
		"order": 27,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$limit",
		"ident": 27,
		"order": 28,
		"desc": "Returns: Specifies a maximum number of results that are required (uses the _count search parameter).",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$limit.$assign",
		"ident": 28,
		"order": 29,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kInteger",
				"subtype": "k32bitint",
				"sublen": 0,
				"param": 1,
				"desc": "Specifies a maximum number of results that are required (uses the _count search parameter)."
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$sort",
		"ident": 29,
		"order": 30,
		"desc": "Returns: Specifies the order of the results to be returned.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$addsort",
		"ident": 30,
		"order": 31,
		"desc": "Specifies the order of the results to be returned.",
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"param": 1
			}
		],
		"lvardefs": [
			{
				"name": "objRef",
				"order": 2,
				"type": "kObjectref",
				"subtype": "oElement",
				"sublen": 0,
				"desc": "Specifies the order of the results to be returned."
			}
		]
	},
	{
		"name": "$sort.path",
		"ident": 31,
		"order": 32,
		"desc": "Returns: The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$sort.path.$assign",
		"ident": 32,
		"order": 33,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that"
			}
		],
		"lvardefs": [

		]
	},
	{
		"name": "$sort.direction",
		"ident": 33,
		"order": 34,
		"desc": "Returns: The direction of the sort, ascending or descending.",
		"pvardefs": [

		],
		"lvardefs": [

		]
	},
	{
		"name": "$sort.direction.$assign",
		"ident": 34,
		"order": 35,
		"pvardefs": [
			{
				"name": "pValue",
				"order": 1,
				"type": "kCharacter",
				"subtype": "kSimplechar",
				"sublen": 100000000,
				"param": 1,
				"desc": "The direction of the sort, ascending or descending."
			}
		],
		"lvardefs": [

		]
	}
]
